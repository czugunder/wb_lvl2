package listing2

import "fmt"

func Start() {
	mymain()
}

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func mymain() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}

// 2 и 1

//  Оператор defer добавляет вызов функции в список на исполнение в формате LIFO (стек).
//  При штатной работе точкой срабатывания этих функций является явный оператор return.
//  Происходит это в следующей последовательности: значения, которые надо вернуть, записываются в так называемую
//  ОБЛАСТЬ ВОЗВРАТА (return location), вызываются отложенные функции, значения берутся
//  из ОБЛАСТИ ВОЗВРАТА и возвращаются туда откуда была вызвана функция окружения.
//  Возвращаясь к области возврата - это область памяти, где хранятся возвращаемые значения, которые прописываются после
//  названия функции (например int в func get(string) int).
//  В функции где есть именованное возвращаемое значение (например, func test() (x int)),
//  к этому значению можно обратиться так как это именованная область памяти.
//  В случае если возвращаемое значение не именованное (например, func anotherTest() int), то обратиться к нему нельзя.

//  Суммируя, в test() отложенная анонимная функция меняет возвращаемое значение x, а в anotherTest(),
//  меняет локальную переменную x, что собственно никак не влияет на то что anotherTest() возвращает, так как при вызове
//  оператор return уже взял текущее значение (на тот момент 1) из переменной x и записал его в область возврата.
